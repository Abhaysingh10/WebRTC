define(['dart_sdk'], (function load__packages__sdp_transform__src__grammar_dart(dart_sdk) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  var grammar = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(true);
  var T = {
    IdentityMapOfString$dynamic: () => (T.IdentityMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, dart.dynamic)))(),
    MapOfString$dynamic: () => (T.MapOfString$dynamic = dart.constFn(core.Map$(core.String, dart.dynamic)))(),
    JSArrayOfMapOfString$dynamic: () => (T.JSArrayOfMapOfString$dynamic = dart.constFn(_interceptors.JSArray$(T.MapOfString$dynamic())))(),
    JSArrayOfString: () => (T.JSArrayOfString = dart.constFn(_interceptors.JSArray$(core.String)))(),
    dynamicToString: () => (T.dynamicToString = dart.constFn(dart.fnType(core.String, [dart.dynamic])))(),
    ListOfMapOfString$dynamic: () => (T.ListOfMapOfString$dynamic = dart.constFn(core.List$(T.MapOfString$dynamic())))(),
    IdentityMapOfString$ListOfMapOfString$dynamic: () => (T.IdentityMapOfString$ListOfMapOfString$dynamic = dart.constFn(_js_helper.IdentityMap$(core.String, T.ListOfMapOfString$dynamic())))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(grammar, {
    /*grammar.grammar*/get grammar() {
      return new (T.IdentityMapOfString$ListOfMapOfString$dynamic()).from(["v", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "version", "reg", "^(\\d*)"])]), "o", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "origin", "reg", "^(\\S*) (\\d*) (\\d*) (\\S*) IP(\\d) (\\S*)", "names", T.JSArrayOfString().of(["username", "sessionId", "sessionVersion", "netType", "ipVer", "address"]), "format", "%s %s %d %s IP%d %s"])]), "s", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "name", "reg", "^(\\S*)"])]), "i", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "description"])]), "u", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "uri"])]), "e", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "email"])]), "p", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "phone"])]), "z", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "timezones"])]), "r", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "repeats"])]), "t", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "timing", "reg", "^(\\d*) (\\d*)", "names", T.JSArrayOfString().of(["start", "stop"]), "format", "%d %d"])]), "c", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["name", "connection", "reg", "^IN IP(\\d) (\\S*)", "names", T.JSArrayOfString().of(["version", "ip"]), "format", "IN IP%d %s"])]), "b", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["push", "bandwidth", "reg", "^(TIAS|AS|CT|RR|RS):(\\d*)", "names", T.JSArrayOfString().of(["type", "limit"]), "format", "%s:%s"])]), "m", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["reg", "^(\\w*) (\\d*) ([\\w/]*)(?: (.*))?", "names", T.JSArrayOfString().of(["type", "port", "protocol", "payloads"]), "format", "%s %d %s %s"])]), "a", T.JSArrayOfMapOfString$dynamic().of([new (T.IdentityMapOfString$dynamic()).from(["push", "rtp", "reg", "^rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?", "names", T.JSArrayOfString().of(["payload", "codec", "rate", "encoding"]), "format", dart.fn(o => dart.dsend(o, '_get', ["encoding"]) != null ? "rtpmap:%d %s/%s/%s" : dart.dsend(o, '_get', ["rate"]) != null ? "rtpmap:%d %s/%s" : "rtpmap:%d %s", T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["push", "fmtp", "reg", "^fmtp:(\\d*) ([\\S| ]*)", "names", T.JSArrayOfString().of(["payload", "config"]), "format", "fmtp:%d %s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "control", "reg", "^control:(.*)", "format", "control:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "rtcp", "reg", "^rtcp:(\\d*)(?: (\\S*) IP(\\d) (\\S*))?", "names", T.JSArrayOfString().of(["port", "netType", "ipVer", "address"]), "format", dart.fn(o => dart.dsend(o, '_get', ["address"]) != null ? "rtcp:%d %s IP%d %s" : "rtcp:%d", T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["push", "rtcpFbTrrInt", "reg", "^rtcp-fb:(\\*|\\d*) trr-int (\\d*)", "names", T.JSArrayOfString().of(["payload", "value"]), "format", "rtcp-fb:%d trr-int %d"]), new (T.IdentityMapOfString$dynamic()).from(["push", "rtcpFb", "reg", "^rtcp-fb:(\\*|\\d*) ([\\w-_]*)(?: ([\\w-_]*))?", "names", T.JSArrayOfString().of(["payload", "type", "subtype"]), "format", dart.fn(o => dart.dsend(o, '_get', ["subtype"]) != null ? "rtcp-fb:%s %s %s" : "rtcp-fb:%s %s", T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["push", "ext", "reg", "^extmap:(\\d+)(?:\\/(\\w+))? (\\S*)(?: (\\S*))?", "names", T.JSArrayOfString().of(["value", "direction", "uri", "config"]), "format", dart.fn(o => "extmap:%d" + (dart.dsend(o, '_get', ["direction"]) != null ? "/%s" : "%v") + " %s" + (dart.dsend(o, '_get', ["config"]) != null ? " %s" : ""), T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["name", "extmap-allow-mixed", "push", "extmapAllowMixed", "reg", "^extmap-allow-mixed"]), new (T.IdentityMapOfString$dynamic()).from(["push", "crypto", "reg", "^crypto:(\\d*) ([\\w_]*) (\\S*)(?: (\\S*))?", "names", T.JSArrayOfString().of(["id", "suite", "config", "sessionConfig"]), "format", dart.fn(o => dart.dsend(o, '_get', ["sessionConfig"]) != null ? "crypto:%d %s %s %s" : "crypto:%d %s %s", T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["name", "setup", "reg", "^setup:(\\w*)", "format", "setup:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "mid", "reg", "^mid:([^\\s]*)", "format", "mid:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "msid", "reg", "^msid:(.*)", "format", "msid:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "ptime", "reg", "^ptime:(\\d*)", "format", "ptime:%d"]), new (T.IdentityMapOfString$dynamic()).from(["name", "maxptime", "reg", "^maxptime:(\\d*)", "format", "maxptime:%d"]), new (T.IdentityMapOfString$dynamic()).from(["name", "direction", "reg", "^(sendrecv|recvonly|sendonly|inactive)"]), new (T.IdentityMapOfString$dynamic()).from(["name", "icelite", "reg", "^(ice-lite)"]), new (T.IdentityMapOfString$dynamic()).from(["name", "iceUfrag", "reg", "^ice-ufrag:(\\S*)", "format", "ice-ufrag:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "icePwd", "reg", "^ice-pwd:(\\S*)", "format", "ice-pwd:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "fingerprint", "reg", "^fingerprint:(\\S*) (\\S*)", "names", T.JSArrayOfString().of(["type", "hash"]), "format", "fingerprint:%s %s"]), new (T.IdentityMapOfString$dynamic()).from(["push", "candidates", "reg", "^candidate:(\\S*) (\\d*) (\\S*) (\\d*) (\\S*) (\\d*) typ (\\S*)(?: raddr (\\S*) rport (\\d*))?(?: tcptype (\\S*))?(?: generation (\\d*))?(?: network-id (\\d*))?(?: network-cost (\\d*))?", "names", T.JSArrayOfString().of(["foundation", "component", "transport", "priority", "ip", "port", "type", "raddr", "rport", "tcptype", "generation", "network-id", "network-cost"]), "format", dart.fn(o => {
              let str = "candidate:%s %d %s %d %s %d typ %s";
              str = str + (dart.dsend(o, '_get', ["raddr"]) != null ? " raddr %s rport %d" : "%v%v");
              str = str + (dart.dsend(o, '_get', ["tcptype"]) != null ? " tcptype %s" : "%v");
              if (dart.dsend(o, '_get', ["generation"]) != null) {
                str = str + " generation %d";
              }
              str = str + (dart.dsend(o, '_get', ["network-id"]) != null ? " network-id %d" : "%v");
              str = str + (dart.dsend(o, '_get', ["network-cost"]) != null ? " network-cost %d" : "%v");
              return str;
            }, T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["name", "endOfCandidates", "reg", "^(end-of-candidates)"]), new (T.IdentityMapOfString$dynamic()).from(["name", "remoteCandidates", "reg", "^remote-candidates:(.*)", "format", "remote-candidates:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "iceOptions", "reg", "^ice-options:(\\S*)", "format", "ice-options:%s"]), new (T.IdentityMapOfString$dynamic()).from(["push", "ssrcs", "reg", "^ssrc:(\\d*) ([\\w_-]*)(?::(.*))?", "names", T.JSArrayOfString().of(["id", "attribute", "value"]), "format", dart.fn(o => {
              let str = "ssrc:%d";
              if (dart.dsend(o, '_get', ["attribute"]) != null) {
                str = str + " %s";
                if (dart.dsend(o, '_get', ["value"]) != null) {
                  str = str + ":%s";
                }
              }
              return str;
            }, T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["push", "ssrcGroups", "reg", "^ssrc-group:([\\x21\\x23\\x24\\x25\\x26\\x27\\x2A\\x2B\\x2D\\x2E\\w]*) (.*)", "names", T.JSArrayOfString().of(["semantics", "ssrcs"]), "format", "ssrc-group:%s %s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "msidSemantic", "reg", "^msid-semantic:\\s?(\\w*) ?(\\S*)", "names", T.JSArrayOfString().of(["semantic", "token"]), "format", "msid-semantic: %s %s"]), new (T.IdentityMapOfString$dynamic()).from(["push", "groups", "reg", "^group:(\\w*) ?(.*)", "names", T.JSArrayOfString().of(["type", "mids"]), "format", "group:%s %s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "rtcpMux", "reg", "^(rtcp-mux)"]), new (T.IdentityMapOfString$dynamic()).from(["name", "rtcpRsize", "reg", "^(rtcp-rsize)"]), new (T.IdentityMapOfString$dynamic()).from(["name", "sctpmap", "reg", "^sctpmap:([\\w_/]*) (\\S*)(?: (\\S*))?", "names", T.JSArrayOfString().of(["sctpmapNumber", "app", "maxMessageSize"]), "format", dart.fn(o => dart.dsend(o, '_get', ["maxMessageSize"]) != null ? "sctpmap:%s %s %s" : "sctpmap:%s %s", T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["name", "xGoogleFlag", "reg", "^x-google-flag:([^\\s]*)", "format", "x-google-flag:%s"]), new (T.IdentityMapOfString$dynamic()).from(["push", "rids", "reg", "^rid:([\\d\\w]+) (\\w+)(?: ([\\S| ]*))?", "names", T.JSArrayOfString().of(["id", "direction", "params"]), "format", dart.fn(o => dart.dsend(o, '_get', ["params"]) != null ? "rid:%s %s %s" : "rid:%s %s", T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["push", "imageattrs", "reg", core.RegExp.new("^imageattr:(\\d+|\\*)" + "[\\s\\t]+(send|recv)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*)" + "(?:[\\s\\t]+(recv|send)[\\s\\t]+(\\*|\\[\\S+\\](?:[\\s\\t]+\\[\\S+\\])*))?"), "names", T.JSArrayOfString().of(["pt", "dir1", "attrs1", "dir2", "attrs2"]), "format", dart.fn(o => "imageattr:%s %s %s" + (dart.dsend(o, '_get', ["dir2"]) != null ? " %s %s" : ""), T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["name", "simulcast", "reg", core.RegExp.new("^simulcast:" + "(send|recv) ([a-zA-Z0-9\\-_~;,]+)" + "(?:\\s?(send|recv) ([a-zA-Z0-9\\-_~;,]+))?" + "$"), "names", T.JSArrayOfString().of(["dir1", "list1", "dir2", "list2"]), "format", dart.fn(o => "simulcast:%s %s" + (dart.dsend(o, '_get', ["dir2"]) != null ? " %s %s" : ""), T.dynamicToString())]), new (T.IdentityMapOfString$dynamic()).from(["name", "simulcast_03", "reg", "^simulcast:[\\s\\t]+([\\S+\\s\\t]+)$", "names", T.JSArrayOfString().of(["value"]), "format", "simulcast: %s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "framerate", "reg", "^framerate:(\\d+(?:$|\\.\\d+))", "format", "framerate:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "sourceFilter", "reg", "^source-filter: *(excl|incl) (\\S*) (IP4|IP6|\\*) (\\S*) (.*)", "names", T.JSArrayOfString().of(["filterMode", "netType", "addressTypes", "destAddress", "srcList"]), "format", "source-filter: %s %s %s %s %s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "bundleOnly", "reg", "^(bundle-only)"]), new (T.IdentityMapOfString$dynamic()).from(["name", "label", "reg", "^label:(.+)", "format", "label:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "sctpPort", "reg", "^sctp-port:(\\d+)$", "format", "sctp-port:%s"]), new (T.IdentityMapOfString$dynamic()).from(["name", "maxMessageSize", "reg", "^max-message-size:(\\d+)$", "format", "max-message-size:%s"]), new (T.IdentityMapOfString$dynamic()).from(["push", "invalid", "names", T.JSArrayOfString().of(["value"])])])]);
    },
    set grammar(_) {}
  }, false);
  dart.trackLibraries("packages/sdp_transform/src/grammar.dart", {
    "package:sdp_transform/src/grammar.dart": grammar
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["grammar.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../../D:/packages/sdp_transform/src/grammar.dart.lib.js"}');
  // Exports:
  return {
    src__grammar: grammar
  };
}));

//# sourceMappingURL=grammar.dart.lib.js.map
